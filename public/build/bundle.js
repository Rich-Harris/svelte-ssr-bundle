(function (internal) {
	'use strict';

	/* shared/Nested.html generated by Svelte v3.19.1 */

	function create_if_block(ctx) {
		let a;
		let t0;
		let t1_value = /*page*/ ctx[0] - 1 + "";
		let t1;
		let a_href_value;

		return {
			c() {
				a = internal.element("a");
				t0 = internal.text("page ");
				t1 = internal.text(t1_value);
				this.h();
			},
			l(nodes) {
				a = internal.claim_element(nodes, "A", { class: true, href: true });
				var a_nodes = internal.children(a);
				t0 = internal.claim_text(a_nodes, "page ");
				t1 = internal.claim_text(a_nodes, t1_value);
				a_nodes.forEach(internal.detach);
				this.h();
			},
			h() {
				internal.attr(a, "class", "prev svelte-1hn1wkl");
				internal.attr(a, "href", a_href_value = "/page/" + (/*page*/ ctx[0] - 1));
			},
			m(target, anchor) {
				internal.insert(target, a, anchor);
				internal.append(a, t0);
				internal.append(a, t1);
			},
			p(ctx, dirty) {
				if (dirty & /*page*/ 1 && t1_value !== (t1_value = /*page*/ ctx[0] - 1 + "")) internal.set_data(t1, t1_value);

				if (dirty & /*page*/ 1 && a_href_value !== (a_href_value = "/page/" + (/*page*/ ctx[0] - 1))) {
					internal.attr(a, "href", a_href_value);
				}
			},
			d(detaching) {
				if (detaching) internal.detach(a);
			}
		};
	}

	function create_fragment(ctx) {
		let div;
		let p;
		let t0;
		let t1;
		let t2;
		let a;
		let t3;
		let t4_value = /*page*/ ctx[0] + 1 + "";
		let t4;
		let a_href_value;
		let if_block = /*page*/ ctx[0] > 1 && create_if_block(ctx);

		return {
			c() {
				div = internal.element("div");
				p = internal.element("p");
				t0 = internal.text("this is a nested component");
				t1 = internal.space();
				if (if_block) if_block.c();
				t2 = internal.space();
				a = internal.element("a");
				t3 = internal.text("page ");
				t4 = internal.text(t4_value);
				this.h();
			},
			l(nodes) {
				div = internal.claim_element(nodes, "DIV", { class: true });
				var div_nodes = internal.children(div);
				p = internal.claim_element(div_nodes, "P", { class: true });
				var p_nodes = internal.children(p);
				t0 = internal.claim_text(p_nodes, "this is a nested component");
				p_nodes.forEach(internal.detach);
				t1 = internal.claim_space(div_nodes);
				if (if_block) if_block.l(div_nodes);
				t2 = internal.claim_space(div_nodes);
				a = internal.claim_element(div_nodes, "A", { class: true, href: true });
				var a_nodes = internal.children(a);
				t3 = internal.claim_text(a_nodes, "page ");
				t4 = internal.claim_text(a_nodes, t4_value);
				a_nodes.forEach(internal.detach);
				div_nodes.forEach(internal.detach);
				this.h();
			},
			h() {
				internal.attr(p, "class", "svelte-1hn1wkl");
				internal.attr(a, "class", "next svelte-1hn1wkl");
				internal.attr(a, "href", a_href_value = "/page/" + (/*page*/ ctx[0] + 1));
				internal.attr(div, "class", "pagination svelte-1hn1wkl");
			},
			m(target, anchor) {
				internal.insert(target, div, anchor);
				internal.append(div, p);
				internal.append(p, t0);
				internal.append(div, t1);
				if (if_block) if_block.m(div, null);
				internal.append(div, t2);
				internal.append(div, a);
				internal.append(a, t3);
				internal.append(a, t4);
			},
			p(ctx, [dirty]) {
				if (/*page*/ ctx[0] > 1) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block(ctx);
						if_block.c();
						if_block.m(div, t2);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (dirty & /*page*/ 1 && t4_value !== (t4_value = /*page*/ ctx[0] + 1 + "")) internal.set_data(t4, t4_value);

				if (dirty & /*page*/ 1 && a_href_value !== (a_href_value = "/page/" + (/*page*/ ctx[0] + 1))) {
					internal.attr(a, "href", a_href_value);
				}
			},
			i: internal.noop,
			o: internal.noop,
			d(detaching) {
				if (detaching) internal.detach(div);
				if (if_block) if_block.d();
			}
		};
	}

	function instance($$self, $$props, $$invalidate) {
		let { page = 1 } = $$props;

		$$self.$set = $$props => {
			if ("page" in $$props) $$invalidate(0, page = $$props.page);
		};

		return [page];
	}

	class Nested extends internal.SvelteComponent {
		constructor(options) {
			super();
			internal.init(this, options, instance, create_fragment, internal.safe_not_equal, { page: 0 });
		}
	}

	/* shared/App.html generated by Svelte v3.19.1 */

	function create_else_block(ctx) {
		let button;
		let t;
		let dispose;

		return {
			c() {
				button = internal.element("button");
				t = internal.text("click me");
				this.h();
			},
			l(nodes) {
				button = internal.claim_element(nodes, "BUTTON", { class: true });
				var button_nodes = internal.children(button);
				t = internal.claim_text(button_nodes, "click me");
				button_nodes.forEach(internal.detach);
				this.h();
			},
			h() {
				internal.attr(button, "class", "svelte-1528l92");
			},
			m(target, anchor) {
				internal.insert(target, button, anchor);
				internal.append(button, t);
				dispose = internal.listen(button, "click", showAlert());
			},
			p: internal.noop,
			d(detaching) {
				if (detaching) internal.detach(button);
				dispose();
			}
		};
	}

	function create_fragment$1(ctx) {
		let h1;
		let t0;
		let t1;
		let t2;
		let p0;
		let t3;
		let t4;
		let p1;
		let t5;
		let t6;
		let div;
		let t7;
		let current;

		function select_block_type(ctx, dirty) {
			return create_else_block;
		}

		let current_block_type = select_block_type();
		let if_block = current_block_type(ctx);
		const nested = new Nested({ props: { page } });

		return {
			c() {
				h1 = internal.element("h1");
				t0 = internal.text("Page ");
				t1 = internal.text(page);
				t2 = internal.space();
				p0 = internal.element("p");
				t3 = internal.text("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.");
				t4 = internal.space();
				p1 = internal.element("p");
				t5 = internal.text("Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.");
				t6 = internal.space();
				div = internal.element("div");
				if_block.c();
				t7 = internal.space();
				internal.create_component(nested.$$.fragment);
				this.h();
			},
			l(nodes) {
				h1 = internal.claim_element(nodes, "H1", { class: true });
				var h1_nodes = internal.children(h1);
				t0 = internal.claim_text(h1_nodes, "Page ");
				t1 = internal.claim_text(h1_nodes, page);
				h1_nodes.forEach(internal.detach);
				t2 = internal.claim_space(nodes);
				p0 = internal.claim_element(nodes, "P", { class: true });
				var p0_nodes = internal.children(p0);
				t3 = internal.claim_text(p0_nodes, "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.");
				p0_nodes.forEach(internal.detach);
				t4 = internal.claim_space(nodes);
				p1 = internal.claim_element(nodes, "P", { class: true });
				var p1_nodes = internal.children(p1);
				t5 = internal.claim_text(p1_nodes, "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.");
				p1_nodes.forEach(internal.detach);
				t6 = internal.claim_space(nodes);
				div = internal.claim_element(nodes, "DIV", { class: true });
				var div_nodes = internal.children(div);
				if_block.l(div_nodes);
				div_nodes.forEach(internal.detach);
				t7 = internal.claim_space(nodes);
				internal.claim_component(nested.$$.fragment, nodes);
				this.h();
			},
			h() {
				internal.attr(h1, "class", "svelte-1528l92");
				internal.attr(p0, "class", "svelte-1528l92");
				internal.attr(p1, "class", "svelte-1528l92");
				internal.attr(div, "class", "interactive svelte-1528l92");
			},
			m(target, anchor) {
				internal.insert(target, h1, anchor);
				internal.append(h1, t0);
				internal.append(h1, t1);
				internal.insert(target, t2, anchor);
				internal.insert(target, p0, anchor);
				internal.append(p0, t3);
				internal.insert(target, t4, anchor);
				internal.insert(target, p1, anchor);
				internal.append(p1, t5);
				internal.insert(target, t6, anchor);
				internal.insert(target, div, anchor);
				if_block.m(div, null);
				internal.insert(target, t7, anchor);
				internal.mount_component(nested, target, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				if_block.p(ctx, dirty);
			},
			i(local) {
				if (current) return;
				internal.transition_in(nested.$$.fragment, local);
				current = true;
			},
			o(local) {
				internal.transition_out(nested.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) internal.detach(h1);
				if (detaching) internal.detach(t2);
				if (detaching) internal.detach(p0);
				if (detaching) internal.detach(t4);
				if (detaching) internal.detach(p1);
				if (detaching) internal.detach(t6);
				if (detaching) internal.detach(div);
				if_block.d();
				if (detaching) internal.detach(t7);
				internal.destroy_component(nested, detaching);
			}
		};
	}
	let page = 1;

	function showAlert() {
		alert("the page is now interactive");
	}

	class App extends internal.SvelteComponent {
		constructor(options) {
			super();
			internal.init(this, options, null, create_fragment$1, internal.safe_not_equal, {});
		}
	}

	const match = /\/page\/(\d+)/.exec( window.location.pathname );

	const target = document.querySelector( 'main' );

	// simulate a loading delay before app becomes interactive
	setTimeout( () => {
		// Right now, we need to clear the target element. This is obviously
		// sub-optimal â€“ we want to reuse the existing elements
		target.innerHTML = '';

		window.app = new App({
			target,
			hydrate: true,
			data: {
				page: +match[1],
				loading: false
			}
		});
	}, 1000 );

}(internal));
//# sourceMappingURL=bundle.js.map
